#rmilter
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; accepted connection from [[:alnum:]._-]+; client: [[:xdigit:].:]+ \(([[:alnum:]._-]+|\[[[:xdigit:].:]+\])\)$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; mlfi_data: queue id: <[[:xdigit:]]+>$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; mlfi_envfrom: client is authenticated as: [[:alnum:]@.-]+$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; mlfi_envfrom: turn off strict checks for authenticated sender: [[:alnum:]@.-]+$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; mlfi_eom: tempfile=/tmp/[^,]+, size=[[:digit:]]+$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; mlfi_eom: add spam header to message according to spamd action$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; spamdscan: (start|finish) scanning message on 127\.0\.0\.1$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; clamscan: (start|finish) scanning message on /var/run/clamav/clamd.ctl$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; clamscan: scan [[:digit:].]+, /var/run/clamav/clamd.ctl, /tmp/msg.[^[:space:]]+$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; msg done: queue_id: <[[:xdigit:]]*>; message id: <[^>]*>; ip: [[:xdigit:].:]+; from: <[[:alnum:]@._+=-]*>; rcpt: <[[:alnum:]@=._+-]*> \([[:digit:]]+ total\); user: (unauthorized|[[:alnum:]@._+=-]+); spam scan: (skipped, whitelisted|no spam|action: add header); virus scan: clean; dkim: not signed, ignored$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; rate_check: ratelimit exceeded for key: <[[:alnum:]._+=-]+@[[:alnum:].-]+>, count: [[:digit:].]+, burst: [[:digit:]]+$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; spamdscan: scan, time: [[:digit:].]+, server: 127.0.0.1, metric: default: \[-?[[:digit:].]+ \/ [[:digit:].]+\], symbols: (([[:upper:][:digit:]_]+)\(-?[[:digit:].]{4}\)\[[^]]*\](, )?)*$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; spamdscan: too large reply: [[:digit:]]+, skip options$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rmilter\[[[:digit:]]+\]: <[[:xdigit:]]+>; cannot add signature for domain [[:alnum:].-]+: not found$

#rspamd
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; bayes; bayes_classify: ignore bayes probability [[:digit:].]+ since we have too few text tokens: [[:digit:]]+, at least [[:digit:]]+ is required$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; csession; rspamd_controller_check_password: allow unauthorized connection from a trusted IP ::1
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; map; http_map_error: connection with http server terminated incorrectly: ssl connect error: syscall fail: .*$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; map; http_map_finish: read map data from rspamd\.com \([[:digit:]]+ bytes compressed, [[:digit:]]+ uncompressed\)$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; map; http_map_finish: cannot load map [^[:space:]]+ from rspamd\.com: HTTP error [[:digit:]]{3}$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; map; rspamd_kv_list_fin: read hash of [[:digit:]]+ elements$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; map; rspamd_map_read_cached: read map data from rspamd\.com \(cached\) \([[:digit:]]+ bytes compressed, [[:digit:]]+ uncompressed\)$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; surbl; process_dns_results: <[[:alnum:]@+._-]+> domain \[[[:alnum:]+.-]+\] is in surbl [[:alnum:]+.()-]+$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; accept_socket: accepted connection from 127.0.0.1 port [[:digit:]]+, task ptr: [[:xdigit:]]{16}$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; dkim_module_key_handler: cannot get key for domain [^[:space:]]+: dns request to [^[:space:]]+ failed: requested record is not found$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; fuzzy_check_timer_callback: got IO timeout with server [^[:space:]]+, after [[:digit:]]+ retransmits
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; fuzzy_generate_commands: <[^>]+>, part (hash empty|is shorter than [[:digit:]]+ bytes \([^\)]+ bytes\)), skip fuzzy check$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; fuzzy_insert_result: found fuzzy hash\(txt\) [[:xdigit:]]+ with weight: [[:digit:].]+, probability [[:digit:].]+, in list: FUZZY_DENIED:1$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; make_dns_request_task_common: <[^>]+> stop resolving on reaching [[:digit:]]+ requests$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_controller_learn_fin_task: <::1> learned message as (spam|ham): [^[:space:]]+$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_html_url_is_phished: extract of url '[^']+' failed: TLD part is not detected$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_message_parse: loaded message; id: <[^>]+>; queue-id: <([[:xdigit:]]{10}|undef)>; size: [[:digit:]]+; checksum: <[[:xdigit:]]{32}>
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_mime_parse_message: cannot find content-type for a message, assume text/plain$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_mime_text_part_maybe_convert: detected charset UTF-8$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_mime_text_to_utf8: converted from (ISO(-|_)8859-(1|15)(:1987)?|windows-1252) to UTF-8 inlen: [[:digit:]]+, outlen: [[:digit:]]+$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_mime_part_get_cte: detected missing CTE for part as: 7bit$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_protocol_http_reply: regexp statistics: [[:digit:]]+ pcre regexps scanned, [[:digit:]]+ regexps matched, [[:digit:]]+ regexps total, [[:digit:]]+ regexps cached, [[:digit:]]+B bytes scanned using pcre, [[:digit:].]+(k|M) bytes scanned total$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_stat_check_autolearn: <[^>]+>: autolearn ham for classifier 'bayes' as message's score is negative: -[[:digit:].]+$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_stat_classifiers_learn: [^>]+> contains less tokens than required for bayes classifier: [[:digit:]]+ < [[:digit:]]+$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_task_process: learn error: [^>]+> contains less tokens than required for bayes classifier: [[:digit:]]+ < [[:digit:]]+$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_task_write_log: id: <[^>]+>, qid: <[[:xdigit:]]{10}>, ip: [[:xdigit:].:]+(, from: <[[:alnum:]@._+=-]+>)?, \(default: F \((no action|add header|greylist)\): \[-?[[:digit:].]+\/[[:digit:].]+\] \[(([[:upper:][:digit:]_]+)\(-?[[:digit:].]{4}\)\{[^\}]*\},?)*\]\), len: [[:digit:]]+, time: [[:digit:].]+ms real, [[:digit:].]+ms virtual, dns req: [[:digit:]]+, digest: <[[:xdigit:]]{32}>, rcpts: <([^>]+,?)+>(, mime_rcpt: <[^>]+>)?$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ rspamd\[[[:digit:]]+\]: \((normal|controller)\) <[[:alnum:]]{6}>; task; rspamd_url_text_extract: got empty text part$

